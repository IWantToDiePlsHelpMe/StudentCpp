#include <iostream>
#include <cstring>
#include <cmath>

using namespace std;

bool symbol_check(char sym){
    switch(sym)
    { case '*': return 3;
        case '+': return true;
        case '-': return true;
        case '(': return true;
        case ')': return true;
        case '^': return true;
        case '/': return true;
        case '*': return true;
    }
    return false;
}

int priority(char sym){
    switch(sym)
    {
        case '(': return 1;
        case '+': return 2;
        case '-': return 2;
        case '^': return 4;
        case '/': return 3;
        case '*': return 3;
    }
    return 0;
}

int ultrapain(int first,int second, char operation){
    switch(operation)
    {
        case'+': return first+second;
        case'-': return first-second;
        case'*': return first*second;
        case'/': return first/second;
        case'^': return pow(first,second);
    }
}

int main(){
    char *input = new char[100];
    cin.getline(input, 100);
    char *exit = new char[strlen(input)+10]; int exitid=0;
    char *operstack = new char[strlen(input)+10]; int ostid=0;
    int *calculation = new int[10]; int calc=0;

    for(int i=0;i<strlen(input);){
            if(!symbol_check(input[i])){
                    exit[exitid]=input[i];
                    i++; exitid++;
            } else if(symbol_check(input[i])){
                    if(ostid>0){
                            if(priority(input[i])<=priority(operstack[ostid-1])){
                                exit[exitid]=operstack[ostid-1];
                                operstack[ostid-1]=input[i];
                                exitid++;
                                //cout<< "first"<<input[i]<<endl;
                            }else if(priority(input[i])>priority(operstack[ostid-1])){
                                operstack[ostid]=input[i];
                                ostid++;
                                //cout<<"second"<<input[i]<<endl;
                            }
                    }else if(ostid==0){
                            operstack[ostid]=input[i];
                            ostid++;
                            //cout<<"third"<< input[i]<<endl;
                    }
             i++;
            }
    }
    ostid--;
    int m=exitid+ostid;
    while(exitid<m||ostid>=0){             //я хз как это работает, но оно работает, причем правильно!!!!
        exit[exitid]=operstack[ostid];
        exitid++;ostid--;
    }
    cout<<endl;

    for(int i=0;i<=m;i++){
        if(!symbol_check(exit[i])){
            calculation[calc]=(int)exit[i]-48;
            calc++;
        }else if(symbol_check(exit[i])){
            calculation[calc-2]=ultrapain(calculation[calc-2],calculation[calc-1],exit[i]);
            calc--;
        }
    }

    cout<<exit<<" "<<exitid<<" | " /*<< operstack<<" "<<ostid<<" "<<operstack[ostid] */<<endl;
    cout<<"aNsWeR iS - "<<calculation[0];

    delete[] operstack;
    delete[] exit;
    delete[] input;
    return 0;
}


//Somebody once told me the world is gonna roll me
//I ain't the sharpest tool in the shed
//She was looking kind of dumb with her finger and her thumb
//In the shape of an "L" on her forehead

