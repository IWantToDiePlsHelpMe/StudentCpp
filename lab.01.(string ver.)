#include <iostream>
#include <stack>
#include <vector>
#include <iterator>
#include <algorithm>
#include <math.h>

using namespace std;

bool is_symbol(char sym)
{
    switch(sym)
    {
        case '+': return true;
        case '-': return true;
        case '(': return true;
        case '^': return true;
        // ---------- //
        case '/': return true;
        case '*': return true;
    }
    return false;
}
 
bool mid_pr(char sym)
{
    switch(sym)
    {
        case '/': return true;
        case '*': return true;
    }
    return false;
}
 
bool low_pr(char sym)
{
    switch(sym)
    {
        case '-': return true;
        case '+': return true;
    }
    return false;
}
 
bool high_pr(char sym)
{
    return sym == '^' ? true : false;
}
 
int main()
{
    cin>>expression;
    stack<char> symbols;
    vector<char> exit_string;
    stack<double> result;
    double buffer = 0;
 
    for(string::iterator it = expression.begin(); it != expression.end(); ++it){
        if(::isdigit(*it)) exit_string.push_back(*it); // Если это цифра
        else if(is_symbol(*it)){
            if(low_pr(*it)){
                if(symbols.size() && !low_pr(symbols.top())){
                    exit_string.push_back(symbols.top());
                    symbols.pop();
                }
                symbols.push(*it);
            }else if(mid_pr(*it)){
                if(symbols.size() && high_pr(symbols.top())){
                    exit_string.push_back(symbols.top());
                    symbols.pop();
                }
                symbols.push(*it);
            }else if(high_pr(*it)){
                symbols.push(*it);
            }
            else symbols.push(*it);
        }else if(*it == ')'){
            while(symbols.top() != '('){
                cout << "\n1";
                exit_string.push_back(symbols.top());
                symbols.pop();
            }if(symbols.size()) { symbols.pop(); }
        }
    }
    while(symbols.size()) { exit_string.push_back(symbols.top()); symbols.pop(); }
    copy(exit_string.begin(), exit_string.end(), ostream_iterator<char>(cout, " "));
 
    for(vector<char>::iterator it = exit_string.begin(); it != exit_string.end(); ++it){
        if(::isdigit(*it)) result.push(*it - '0');
        else
            switch(*it)
            {
            case '+': { buffer = result.top(); result.pop(); result.top() += buffer; break; }
            case '-': { buffer = result.top(); result.pop(); result.top() -= buffer; break; }
            case '*': { buffer = result.top(); result.pop(); result.top() *= buffer; break; }
            case '/': { buffer = result.top(); result.pop(); result.top() /= buffer; break; }
            case '^': { buffer = result.top(); result.pop(); result.top() = pow(result.top(), buffer); break; }
            }
    }
    cout << "\n --- " << result.top();
    return 0;
}
